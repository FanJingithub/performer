#!/usr/bin/python
# -*- coding:utf-8 -*-
'''
Web Frame: performer (An automatic full-stack web frame, which can generate numerous form-style web pages with backend code)
File Name: code_generator
Description: The HTML, Javascript, and Python Code can be generated by the code_generator
Author: Fan Jin
Date: 2019.05.11
'''

import json

# username & password for MySQL
username = "debian-sys-maint"
password = "fmvKL0UlQ558lKWG"

# generator the HTML code
def generateHTML(editable):

    # generator the Javascript code
    def generateJS(editable):
        
        if (editable==0):
            #-------------------------------------------------------------
            # read version
            #typeName = "read"
            code = ""
            other_part = ""
            code =  code + '''var vm = new Vue({
            el: '#vm',
            data: {'''
            for ii in range(len(config["blocks"])):
                block = config["blocks"][ii]
                for i in range(len(block["elements"])):
                    element = block["elements"][i]
                    dateTrans_1 = ""
                    dateTrans_2 = ""
                    if (element["class"]=="time"):
                        dateTrans_1 = 'new Date(parseInt('
                        dateTrans_2 = ")*1000)"
                    if (element["class"]!="table"):
                        newCode = '''
                    {0}: {1}"{{{{{0}}}}}"{2},'''.format(element["name"],dateTrans_1,dateTrans_2)
                    else:
                        newCode = ""
                        for j in range(len(element["content"])):
                            dateTrans_1 = ""
                            dateTrans_2 = ""
                            if (element["content"][j]["class"]=="time"):
                                dateTrans_1 = 'new Date(parseInt('
                                dateTrans_2 = ")*1000)"

                            for k in range(int(element["row"])):
                                newCode = newCode + '''
                    {0}: {1}"{{{{{0}}}}}"{2},'''.format(element["content"][j]["name"]+"_"+str(k),dateTrans_1,dateTrans_2)
                            
                    code = code + newCode

                    if (element["class"]=="radio" and int(element["other"])==1):
                        newCode = '''
                    {0}: "{{{{{0}}}}}",'''.format(element["name"]+"_other")
                        code = code + newCode
                        other_part = other_part + '''
                    if (this.{0}!="other") this.{1} = "";'''.format(element["name"],element["name"]+"_other")

            code = code[:len(code)-1] + '''
            },
            mounted(){
                this.init()
            },
            methods:{
                init:function(){'''

            code = code + other_part
            code = code + '''
                }},
                submit:function(){{
                    return 0;
                }},
                edit:function(){{
                    window.location.href="/{0}?patient_id={{{{patient_id}}}}&edit=1";
                }}
            }}
        }});'''.format(configName)
            #------------------------------------------------------------
        else:
            #-------------------------------------------------------------
            # edit version
            #typeName = "edit"
            code = ""
            other_part = ""
            code = code + '''var vm = new Vue({
            el: '#vm',
            data: {'''
            for ii in range(len(config["blocks"])):
                block = config["blocks"][ii]
                for i in range(len(block["elements"])):
                    element = block["elements"][i]
                    dateTrans_1 = ""
                    dateTrans_2 = ""
                    if (element["class"]=="time"):
                        dateTrans_1 = "new Date(parseInt("
                        dateTrans_2 = ")*1000)"
                    if (element["class"]!="table"):
                        newCode = '''
                    {0}: {1}"{{{{{0}}}}}"{2},'''.format(element["name"],dateTrans_1,dateTrans_2)
                    else:
                        newCode = ""
                        for j in range(len(element["content"])):
                            dateTrans_1 = ""
                            dateTrans_2 = ""
                            if (element["content"][j]["class"]=="time"):
                                dateTrans_1 = 'new Date(parseInt('
                                dateTrans_2 = ")*1000)"

                            for k in range(int(element["row"])):
                                newCode = newCode + '''
                    {0}: {1}"{{{{{0}}}}}"{2},'''.format(element["content"][j]["name"]+"_"+str(k),dateTrans_1,dateTrans_2)
                    
                    code = code + newCode

                    if (element["class"]=="radio" and int(element["other"])==1):
                        newCode = '''
                    {0}: "{{{{{0}}}}}",'''.format(element["name"]+"_other")
                        code = code + newCode
                        other_part = other_part + '''
                        if (this.{0}!="other") this.{1} = "";'''.format(element["name"],element["name"]+"_other")
                    
            code = code[:len(code)-1] + '''
            }},
            mounted(){{
                this.init()
            }},
            methods:{{
                init:function(){{
                    this.$http.get('/api/{0}?patient_id={{{{patient_id}}}}').then(function(res){{'''.format(configName)
            
            dateTrans_4 = ""
            for ii in range(len(config["blocks"])):
                block = config["blocks"][ii]
                for i in range(len(block["elements"])):
                    element = block["elements"][i]
                    dateTrans_1 = ""
                    dateTrans_2 = ""
                    dateTrans_4 = ""
                    if (element["class"]=="time"):
                        dateTrans_1 = "new Date(parseInt("
                        dateTrans_2 = ")*1000)"
                        dateTrans_4 = '''
                        if (isNaN(this.{0}.getTime())) this.{0}="";'''.format(element["name"])
                    if (element["class"]!="table"):
                        newCode = '''
                        this.{0}={1}res.data.{0}{2};{3}'''.format(element["name"],dateTrans_1,dateTrans_2,dateTrans_4)
                    else:
                        newCode = ""
                        for j in range(len(element["content"])):
                            for k in range(int(element["row"])):
                                dateTrans_1 = ""
                                dateTrans_2 = ""
                                dateTrans_4 = ""
                                if (element["content"][j]["class"]=="time"):
                                    dateTrans_1 = "new Date(parseInt("
                                    dateTrans_2 = ")*1000)"
                                    dateTrans_4 = '''
                        if (isNaN(this.{0}.getTime())) this.{0}="";'''.format(element["content"][j]["name"]+"_"+str(k))

                            
                                newCode = newCode + '''
                        this.{0}={1}res.data.{0}{2};{3}'''.format(element["content"][j]["name"]+"_"+str(k),dateTrans_1,dateTrans_2,dateTrans_4)

                    code = code + newCode

                    if (element["class"]=="radio" and int(element["other"])==1):
                        newCode = '''
                        this.{0}=res.data.{0};'''.format(element["name"]+"_other")
                        code = code + newCode

            code = code + other_part
            code = code + '''
                    },function(){
                        console.log('error');
                    });
                },
                submit: function(event) {
                    event.preventDefault();'''
                    

            part_1 = ""
            part_2 = ""
            for ii in range(len(config["blocks"])):
                block = config["blocks"][ii]
                for i in range(len(block["elements"])):
                    element = block["elements"][i]
                    dateTrans_3 = ""
                    if (element["class"]=="time"):
                        dateTrans_3 = '''
                    if (this.{0}!="") this.{0}=this.{0}.getTime()/1000;'''.format(element["name"])
                    if (element["class"]!="table"):
                        newCode = '''
                        {0}: this.{0},'''.format(element["name"])
                    else:
                        newCode = ""
                        for j in range(len(element["content"])):
                            for k in range(int(element["row"])):
                                if (element["content"][j]["class"]=="time"):
                                    dateTrans_3 = dateTrans_3 + '''
                    if (this.{0}!="") this.{0}=this.{0}.getTime()/1000;'''.format(element["content"][j]["name"]+"_"+str(k))

                                newCode = newCode + '''
                        {0}: this.{0},'''.format(element["content"][j]["name"]+"_"+str(k))

                    part_1 = part_1 + newCode
                    part_2 = part_2 + dateTrans_3
                    
                    if (element["class"]=="radio" and int(element["other"])==1):
                        newCode = '''
                        {0}: this.{0},'''.format(element["name"]+"_other")
                        part_1 = part_1 + newCode

            code = code + part_2 + '''
                    var
                    $form = $('#vm'),
                    data = {'''
            code = code + part_1[0:len(part_1)-1] + '''
                    }};
                    this.$http.post('/{0}',data,{{emulateJSON:true}}).then(function(res){{
                        document.write(res.body);    
                    }},function(res){{
                        console.log(res.status);
                    }});
                }}
            }}
        }});'''.format(configName)
            #------------------------------------------------------------

        #fileName = "./js/"+typeName + "_" +configName + "_code.js"
        #with open(fileName,"w") as coder:
        #    coder.write(code)
        return code

    # --------------------------------------
    # the main code for generating HTML code
    disabled = ""
    #buttonName = "提交"
    #buttonAction = ''
    typeName = "edit"
    if (editable==0):
        disabled = "disabled"
        #buttonName = "编辑"
        #buttonAction = ''' v-on:click="/{0}?patient_id={{{{patient_id}}}}&edit=1" '''.format(configName)
        typeName = "read"

    code = '''<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Data System</title>
    <link rel="stylesheet" href="css/style_186.css">
    <link rel="stylesheet" href="https://unpkg.com/element-ui/lib/theme-chalk/index.css">
    <script src="./js/vue.js"></script>
    <script src="./js/vue-resource.js"></script>
    <script src="./js/jquery-3.4.1.js"></script>
    <script src="https://unpkg.com/element-ui/lib/index.js"></script>
</head>
<body>
    <div class="main-body">
        <div class="heading">
            <h1>临床科研数据库系统</h1>
        </div>
        <div id="menu" class="menu">
            <div style="text-align:center">
                <h3>导航栏</h3>
            </div>'''

    code = code + '''
            <div class="menu-item">
                <a class="item-link" href="/list">
                    <div>病例列表</div>
                </a>
            </div>
            '''
    for i in range(len(config_main["elements"])):
        element = config_main["elements"][i]
        code = code + '''
            <div class="menu-item">
                <a class="item-link" href="/{0}?patient_id={{{{patient_id}}}}">
                    <div>{1}</div>
                </a>
            </div>'''.format(element["name"], element["label"])
    code = code + '''
        </div>
        <div class="container">
            <div style="text-align:center">
                <h2>{0}</h2>
            </div>
            <br>
            <form id="vm" v-on:submit="submit">
                <input type="text" value="{{{{patient_id}}}}" v-model="patient_id" v-show="false"></input>
                <div class="form-part">'''.format(config["label"])


    num_blocks = len(config["blocks"])
    for ii in range(num_blocks):
        block = config["blocks"][ii]
        len_elements = len(block["elements"])
        code = code + '''
                    <div class="block">
                        <h3>{0}</h3>'''.format(block["label"])

        for i in range(0,len_elements):
            element = block["elements"][i]
            newCode = ""
            if (element["class"]=="label"):
                pass
            elif (element["class"]=="text"):
                newCode = '''
                        <div>
                            <label class="form-label">{0}: </label>
                            <input class="form-text" v-model="{1}" {2}>
                            <br/><br/>
                        </div>'''.format(element["label"], element["name"], disabled)
            
            elif (element["class"]=="number"):
                newCode = '''
                        <div>
                            <label class="form-label">{0}: </label>
                            <input class="form-number" type="number" v-model.number="{1}" {3}>
                            <label>&nbsp;{2}</label>
                            <br/><br/>
                        </div>'''.format(element["label"], element["name"], element["unit"], disabled)

            elif (element["class"]=="radio"):
                newCode = '''
                        <div>
                            <label class="form-label">{0}:</label>'''.format(element["label"])
                for j in range(len(element["options"])):
                    newOption = '''
                            <input type="radio" id="{0}" value="{0}" v-model="{2}" {3}>
                            <label for="{0}">{1}&nbsp;&nbsp;</label>'''.format(
                                element["options"][j]["value"], element["options"][j]["label"], element["name"], disabled)
                    newCode = newCode + newOption
                if (int(element["other"])==1):
                    newOption = '''
                            <input type="radio" value="other" v-model="{0}" {2}>
                            <label for="other">其他：&nbsp;</label>
                            <input type="text" class="form-text" v-model="{1}"  {2}>'''.format(
                                element["name"], element["name"]+"_other", disabled)
                    newCode = newCode + newOption
                newCode = newCode + '''<br/><br/>
                        </div>'''
                
            elif (element["class"]=="time"):
                newCode = '''
                        <div>
                            <label class="form-label">{0}: </label>
                            <el-date-picker v-model="{1}" type="date" placeholder="Pick a day" {2}></el-date-picker>
                            <br/><br/>
                        </div>'''.format(element["label"], element["name"], disabled)
                
            elif (element["class"]=="table"):
                newCode = '''
                        <table width="100%" border="0" cellspacing="1" cellpadding="4" class="tabtop13" align="center">'''
                newRow = '''
                            <tr>'''
                for j in range(len(element["content"])):
                    newRow = newRow + '''
                                <td width="30%" style="background:#e9faff !important; text-align:center;
                                font-family: 微软雅黑;font-size: 16px;font-weight: bold;color: #255e95;
                                background-color:#e9faff;">{0}</td>'''.format(element["content"][j]['label'])
                newRow = newRow + '''
                            </tr>'''
                newCode = newCode + newRow

                for k in range(int(element["row"])):
                    newRow = '''
                            <tr>'''
                    for j in range(len(element["content"])):
                        if (element["content"][j]["class"]=="text"):
                            newRow = newRow + '''
                                <td style="text-align: center"><input style="width:90%; height:90%" v-model="{0}" {1}></td>'''.format(element["content"][j]["name"]+"_"+str(k),disabled)
                        elif (element["content"][j]["class"]=="number"):
                            newRow = newRow + '''
                                <td style="text-align: center"><input style="width:36px; height:20px" type="number" v-model.number=="{0}" {1}></td>'''.format(element["content"][j]["name"]+"_"+str(k),disabled)
                        elif (element["content"][j]["class"]=="radio"):
                            newRow = newRow + '''
                                <td style="text-align: center">'''
                            for jj in range(len(element["content"][j]["options"])):
                                newOption = '''
                                    <input type="radio" id="{0}" value="{0}" v-model="{2}" {3}>
                                    <label style="font-size:12px" for="{0}">{1}&nbsp;&nbsp;</label>'''.format(element["content"][j]["options"][jj]["value"],
                                    element["content"][j]["options"][jj]["label"], element["content"][j]["name"]+"_"+str(k),disabled)
                                newRow = newRow + newOption
                            newRow = newRow + '''
                                </td>'''
                        elif (element["content"][j]["class"]=="time"):
                            newRow = newRow + '''
                                <td style="text-align: center"><el-date-picker v-model="{0}" type="date" placeholder="Pick a day" {1}></el-date-picker></td>'''.format(
                                    element["content"][j]["name"]+"_"+str(k),disabled)
                    newRow = newRow + '''
                            </tr>'''
                    newCode = newCode + newRow
                newCode = newCode + '''
                        </table>'''
                if (element["explain"]!=""):
                    explain = element["explain"]
                    explain = explain.replace("\r\n","<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;")
                    explain = explain.replace("\n","<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;")
                    newCode = newCode + '''
                        <label style="font-size:12px">注：{0}</label><br/><br/>'''.format(explain)
            
            elif (element["class"]=="select"):
                pass
            code = code + newCode
        code = code + '''
                    </div>'''

    if (editable==1):
        newCode = '''</div>
                <div class="form-part-3">
                    <input type="submit" value="提交">
                </div>    
            </form>
        </div>
    </div>
    <script>
        '''
    else:
        newCode = '''</div>
                <div class="form-part-3">
                    <button class="submit" type="button" v-on:click="edit">编辑</button>
                </div>    
            </form>
        </div>
    </div>
    <script>
        '''
    code = code + newCode

    code = code + generateJS(editable)

    code = code + '''
    </script>
</body>
</html>'''

    fileName = "html/" + typeName + "_" +configName + "_page.html"
    with open(fileName,"w",encoding="utf-8") as coder:
        coder.write(code)

# generator the Python Handler:
def generatePython_Handler():

    # ==========================
    # generator the page Handler
    code = '''# -*- coding:utf-8 -*-
# Created by Machine (Fan Jin build the code-generator)

import tornado, os, MySQLdb
import tornado.gen
import tornado.web
import json

class ''' 
    code = code + configName +"Handler(tornado.web.RequestHandler):"

    # -----------------------
    # generate the GET method
    code = code + '''

    def get(self):
        print('----------------------------Get {0}--------------------------')

        try:
            edit = self.get_argument("edit", "0")
        except:
            edit = "0"
        
        self.patient_id = self.get_argument("patient_id", "")
        exist = 0
        
        # Get the patient's data status from the database
        conn = MySQLdb.connect( host   = 'localhost',
                                user   = '{1}',
                                passwd = '{2}',
                                db     = 'MData',
                                charset= 'utf8')
        conn.autocommit(1)

        self.cur = conn.cursor()
        self.cur.execute('''.format(configName,username,password)
    code = code + "'''" + "SELECT " + configName + " FROM data_status WHERE patient_id='{0}' " + "'''"
    code = code + '''.format(self.patient_id))
        for row in self.cur:
            exist = row[0]
        self.cur.close()'''
    
    # generate the dynamic part for GET methon
    part_1 = "patient_id,"
    part_2 = ' patient_id=self.patient_id, '
    part_3 = ""
    kk = 1
    for ii in range(len(config["blocks"])):
        block = config["blocks"][ii]
        for i in range(len(block["elements"])):
            element = block["elements"][i]
            if (element["class"]!="label" and element["class"]!="table"):
                part_1 = part_1 + element["name"]+ ","
                part_2 = part_2 + ''' {0}=res[{1}],'''.format(element["name"],kk)
                part_3 = part_3 + ', ""'
                kk = kk + 1
                if (element["class"]=="radio" and int(element["other"])==1):
                    part_1 = part_1 + element["name"]+ "_other,"
                    part_2 = part_2 + ''' {0}=res[{1}],'''.format(element["name"]+"_other",kk)
                    part_3 = part_3 + ', ""'
                    kk = kk + 1

            elif (element["class"]=="table"):
                for j in range(len(element["content"])):
                    for k in range(int(element["row"])):
                        part_1 = part_1 + element["content"][j]["name"]+"_"+str(k)+ ","
                        part_2 = part_2 + ''' {0}=res[{1}],'''.format(element["content"][j]["name"]+"_"+str(k),kk)
                        part_3 = part_3 + ', ""'
                        kk = kk + 1
            
    part_1 = part_1[0:len(part_1)-1]
    part_2 = part_2[0:len(part_2)-1]
    #part_3 = part_3[0:len(part_3)-1]
    
    code = code + '''

        res = ['''
    code = code + "self.patient_id" + part_3 +"]"

    code =code + '''

        if (exist==1):
            # Get the data from the database
            self.cur = conn.cursor()
            self.cur.execute('''
    code = code + "'''SELECT "

    code = code + part_1 + " FROM " + configName + " WHERE patient_id='{0}' '''.format(self.patient_id))"
    code = code + '''
            for row in self.cur:
                res = row'''
    code = code + '''

        if (exist==1 and edit=="0"):
            self.render("../html/read_'''
    code = code + configName + '''_page.html",''' + part_2 + ''')
        else:
            self.render("../html/edit_'''
    code = code + configName + '''_page.html",''' + part_2 + ''')'''

    # ------------------------
    # generate the POST method
    code = code + '''

    def post(self):
        print('----------------------------Submit----------------------------')

        self.patient_id = self.get_body_argument("patient_id")
        '''
    # generate the dynamic part for POST method
    part_0 = ""
    part_1_1 = "patient_id, "
    part_1_2 = "'{0}', "
    part_2 = "self.patient_id, "
    part_3 = ' patient_id=self.patient_id, '
    kk = 1
    for ii in range(len(config["blocks"])):
        block = config["blocks"][ii]
        for i in range(len(block["elements"])):
            element = block["elements"][i]
            if (element["class"]=="label"):
                continue
            if (element["class"]!="table"):
                part_0 = part_0 + element["name"] + ' = self.get_body_argument("'+ element["name"] + '") ' + '''
        '''
                part_1_1 = part_1_1 + element["name"] + ", "
                part_1_2 = part_1_2 + "'{" + str(kk) + "}', "
                part_2 = part_2 + element["name"] + ","
                part_3 = part_3 +  element["name"] + '=' + element["name"] + ", "
                kk = kk + 1
                if (element["class"]=="radio" and int(element["other"])==1):
                    part_0 = part_0 + element["name"] + '_other = self.get_body_argument("'+ element["name"] + '_other") ' + '''
        '''
                    part_1_1 = part_1_1 + element["name"] + "_other, "
                    part_1_2 = part_1_2 + "'{" + str(kk) + "}', "
                    part_2 = part_2 + element["name"] + "_other,"
                    part_3 = part_3 +  element["name"] + '_other=' + element["name"] + "_other, "
                    kk = kk + 1

            else:
                for j in range(len(element["content"])):
                    for k in range(int(element["row"])):
                        part_0 = part_0 + element["content"][j]["name"] +"_"+str(k) + ' = self.get_body_argument("'+ element["content"][j]["name"] +"_"+str(k) + '") ' + '''
        '''
                        part_1_1 = part_1_1 + element["content"][j]["name"] +"_"+str(k) + ", "
                        part_1_2 = part_1_2 + "'{" + str(kk) + "}', "
                        part_2 = part_2 + element["content"][j]["name"] +"_"+str(k) + ","
                        part_3 = part_3 +  element["content"][j]["name"] +"_"+str(k) + '=' + element["content"][j]["name"] +"_"+str(k) + ", "
                        kk = kk + 1
    
    part_1_1 = part_1_1[0:len(part_1_1)-2]
    part_1_2 = part_1_2[0:len(part_1_2)-2]
    part_2 = part_2[0:len(part_2)-1]
    part_3 = part_3[0:len(part_3)-2]

    code = code + part_0 + '''
        conn = MySQLdb.connect( host   = 'localhost',
                                user   = '{0}',
                                passwd = '{1}',
                                db     = 'MData',
                                charset= 'utf8')
        conn.autocommit(1)

        # Insert the data into the database
        self.cur = conn.cursor()
        '''.format(username,password)
    code = code + "sqls = '''REPLACE INTO " + configName + " "

    code = code + "(" + part_1_1 + ") VALUES (" + part_1_2 + ")" + " '''.format(" + part_2 + ")"
    code = code + '''
        self.cur.execute(sqls)

        sqls = "SELECT * FROM data_status WHERE patient_id='" + self.patient_id + "'"
        self.cur.execute(sqls)
        exist_data = 0
        for row in self.cur:
            exist_data = row
            exist_data = 1
        
        if (exist_data == 1):
            sqls = "UPDATE data_status SET {0}=1 WHERE patient_id='" + self.patient_id + "'"
        else:
            sqls = "REPLACE INTO data_status (patient_id,{0}) VALUES ('"+ self.patient_id + "'," + "1)"

        self.cur.execute(sqls)
        self.cur.close()'''.format(configName)
    
    code = code + '''

        self.render("../html/read_'''
    code = code + configName + '''_page.html",''' + part_3 + ''')
'''

    fileName = "./handlers/" + configName + "Handler.py"
    with open(fileName,"w") as coder:
        coder.write(code)

    # ==========================
    # generator the api Handler
    code = '''# -*- coding:utf-8 -*-
# Created by Machine (Fan Jin build the code-generator)

import tornado, os, MySQLdb
import tornado.gen
import tornado.web
import json

class api_''' 
    code = code + configName +"Handler(tornado.web.RequestHandler):"
    code = code + '''

    def get(self):
        print('----------------------------Get api-{0}----------------------')
        self.patient_id = self.get_argument("patient_id", "")'''.format(configName)
    
    code = code + '''
        conn = MySQLdb.connect( host   = 'localhost',
                                user   = '{0}',
                                passwd = '{1}',
                                db     = 'MData',
                                charset= 'utf8')
        conn.autocommit(1)
        # Get the data from the database
        self.cur = conn.cursor()
        self.cur.execute('''.format(username,password)
    code = code + "'''SELECT "
    # generate the dynamic part for api Handler
    part_1 = ""
    part_2 = ' "patient_id":self.patient_id,'
    part_3 = ""
    kk = 1
    for ii in range(len(config["blocks"])):
        block = config["blocks"][ii]
        for i in range(len(block["elements"])):
            element = block["elements"][i]
            if (element["class"]!="table"):
                part_1 = part_1 + element["name"] + ","
                if (element["class"]!="label"):
                    part_2 = part_2 + ''' "{0}":res[{1}],'''.format(element["name"],kk)
                    part_3 = part_3 + ', ""'
                    kk = kk + 1
                if (element["class"]=="radio" and int(element["other"])==1):
                    part_1 = part_1 + element["name"] + "_other,"
                    part_2 = part_2 + ''' "{0}":res[{1}],'''.format(element["name"]+"_other",kk)
                    part_3 = part_3 + ', ""'
                    kk = kk + 1
                    
            else:
                for j in range(len(element["content"])):
                    for k in range(int(element["row"])):
                        part_1 = part_1 + element["content"][j]["name"] + "_" + str(k) + ","
                        part_2 = part_2 + ''' "{0}":res[{1}],'''.format(element["content"][j]["name"] + "_" + str(k), kk)
                        part_3 = part_3 + ', ""'
                        kk = kk + 1
    
    part_1 = part_1[0:len(part_1)-1] + " FROM "
    part_2 = part_2[0:len(part_2)-1] + "}"

    code = code + part_1 + configName + " WHERE patient_id='{0}' '''.format(self.patient_id))"
    code = code + '''
        res = ['''
    code = code + "self.patient_id" + part_3 +"]"
    code = code + '''
        for row in self.cur:
            res = row
        self.data = {'''
    code = code + part_2
    code = code + '''
        self.write(json.dumps(self.data))
'''

    fileName = "./handlers/api_" + configName + "Handler.py"
    with open(fileName,"w") as coder:
        coder.write(code)
    
# generator the SQL code: Handler
def generateSQL_Handler():
    code = '''use MData;

grant select, insert, update, delete on MData.* to '{0}'@'localhost' identified by '{1}';

'''.format(username,password)

    code = code + "create table " + configName + " ("
    code = code + '''
    '''
    for ii in range(len(config["blocks"])):
        block = config["blocks"][ii]
        for i in range(len(block["elements"])):
            element = block["elements"][i]
            if (element["class"]!="table"):
                code = code + "`" + element["name"] + "`  varchar(20) default ''"
                code = code + ''',
    '''
                if (element["class"]=="radio" and int(element["other"])==1):
                    code = code + "`" + element["name"] + "_other`  varchar(50) default ''"
                    code = code + ''',
    '''

            else:
                for j in range(len(element["content"])):
                    for k in range(int(element["row"])):
                        code = code + "`" + element["content"][j]["name"] + "_" +str(k)  + "`  varchar(20) default ''"
                        code = code + ''',
    '''
    code = code + '''primary key(patient_id)
) engine=innodb         default charset=utf8;
'''

    fileName = "./sql/" + configName + ".sql"
    with open(fileName,"w") as coder:
        coder.write(code)

# generator the SQL code: TABLE data_status
def generateSQL_dataStatus():
    code = '''use MData;

grant select, insert, update, delete on MData.* to '{0}'@'localhost' identified by '{1}';

'''.format(username,password)

    code = code + "create table data_status ("
    code = code + '''
    `patient_id`  varchar(12)  default '',
    '''
    for i in range(len(config_main["elements"])):
        element = config_main["elements"][i]
        code = code + "`" + element["name"] + "`  INT default 0"
        if (i<len(config_main["elements"])-1):
            code = code + ''',
    '''
        else:
            code = code + '''
) engine=innodb         default charset=utf8;
'''

    fileName = "./sql/data_status.sql"
    with open(fileName,"w") as coder:
        coder.write(code)

# generator the Python App.py:
def generatePython_App():

    code = '''# -*- coding:utf-8 -*-
# Created by Machine (Fan Jin build the code-generator)

import tornado, os
import tornado.web
from tornado import netutil, process, httpserver
from tornado.ioloop import IOLoop
from tornado.httpserver import HTTPServer

import MySQLdb

import json

'''

    part_1 = ""
    part_2 = ""
    part_3 = '''("/list",      listHandler),
                        ("/api/new",      api_newHandler),
                        ("/api/list",      api_listHandler),
                        '''
    part_4 = ""
    for i in range(len(config_main["elements"])):
        element = config_main["elements"][i]
        part_1 = part_1 + "from handlers." + element["name"] + "Handler import " + element["name"] + "Handler" + '''
'''
        part_2 = part_2 + "from handlers.api_" + element["name"] + "Handler import api_" + element["name"] + "Handler" + '''
'''
        part_3 = part_3 + '("/' + element["name"] + '",      ' + element["name"] + "Handler)" + ''',
                        '''
        part_4 = part_4 + '("/api/' + element["name"] + '",      api_' + element["name"] + "Handler)"
        if (i<len(config_main["elements"])-1):
            part_4 = part_4 + ''',
                        '''
    
    code = code + part_1 +part_2

    code = code + '''
class listHandler(tornado.web.RequestHandler):

    def get(self):
        print('----------------------------Get list--------------------------')
        self.render("list.html")

class api_newHandler(tornado.web.RequestHandler):

    def get(self):
        print('----------------------------Get new--------------------------')
        self.patient_id = self.get_argument("patient_id", "")
        conn = MySQLdb.connect( host   = 'localhost',
                                user   = '{0}',
                                passwd = '{1}',
                                db     = 'MData',
                                charset= 'utf8')
        conn.autocommit(1)
        # Get the data from the database
        self.cur = conn.cursor()
        sqls = "SELECT patient_id FROM base WHERE patient_id='" + self.patient_id + "'"
        self.cur.execute(sqls)
        result = 0
        for row in self.cur:
            result = 1
        self.data = {{ "patient_id": self.patient_id, "result": result }}
        self.write(json.dumps(self.data))

class api_listHandler(tornado.web.RequestHandler):

    def get(self):
        print('----------------------------Get api-list--------------------------')
        conn = MySQLdb.connect( host   = 'localhost',
                                user   = '{0}',
                                passwd = '{1}',
                                db     = 'MData',
                                charset= 'utf8')
        conn.autocommit(1)
        # Get the data from the database
        self.cur = conn.cursor()
        sqls = "SELECT patient_id,sex,age FROM base"
        self.cur.execute(sqls)
        patient_list = []
        for row in self.cur:
            patient_list.append({{
                "patient_id": row[0],
                "sex": row[1],
                "age": row[2]
            }})
        print(patient_list)
        self.write(json.dumps(patient_list))
'''.format(username,password)

    code = code + '''

class Application(tornado.web.Application):

    def __init__(self):

        handlers =  [
                        '''
    code = code + part_3 + part_4

    code = code + '''
                    ]

        tornado.web.Application.__init__(self, handlers)

if __name__ == "__main__":
    app = Application()
    print('----------------------------Start Server----------------------------')
    server = HTTPServer(app)
    server.listen(6002)
    IOLoop.current().start()
'''

    fileName = "app.py"
    with open(fileName,"w") as coder:
        coder.write(code)


# loading the config file
config_text = open("configuration.json",encoding="utf-8")
jsonData = config_text.read()
config_main = json.loads(jsonData)

# test the loading file
#print("-------------------Check the main configuration File---------------------")
#print(config_main["elements"][0])
#print("-------------------------------------------------------------------------")

for config_element in config_main["elements"]:
    config_name = "configuration/config_" + config_element["name"] + ".json"
    config_text = open(config_name,encoding="utf-8")
    jsonData = config_text.read()
    config = json.loads(jsonData)
    configName = config["name"]

    # test the loading file
    #print("--------------------------Test the Loading File--------------------------")
    #print(config["elements"][1])
    #print("-------------------------------------------------------------------------")

    generateHTML(0)
    generateHTML(1)
    generatePython_Handler()
    generateSQL_Handler()

generateSQL_dataStatus()
generatePython_App()
