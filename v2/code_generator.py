#!/usr/bin/python
# -*- coding:utf-8 -*-
'''
Web Frame: performer (An automatic full-stack web frame, which can generate numerous form-style web pages with backend code)
File Name: code_generator
Description: The HTML, Javascript, and Python Code can be generated by the code_generator
Author: Fan Jin
Date: 2019.05.11
Date for Version 2: 2020.04.06
'''

import json
import os
import shutil

# base configuration
version = "1"
username = "root"
password = "1"
database = "Test"
app_Name = "Test"
port_in = "92"
port_out = "6012"
app_dir = "/srv/MData_all/Test"
remote_base_dir = '/home/ubuntu/files/Web'
needPic = "1"
clear = ""
maxPage = 10

app_info = {"app_name":app_Name, "version":version, "app_dir":app_dir}
app_info_text = json.dumps(app_info,sort_keys=True, indent=4, separators=(',', ': '))
fileName = "../app_info.json"
with open(fileName,"w") as newfile:
    newfile.write(app_info_text)

#--------------------------------------------------------------------------------------------------------------------------
# get side menu
def getSideMenu(active_item,page_index):

    side_code = '''
        side_menu = {0}
            <li class="mt">
		        <a href="/list">
                        <i class="fa fa-tasks"></i>
                        <span>病例列表</span>
                    </a>
            </li>
            {0}
        '''.format("'''")
    
    side_part_1 = "self.cur.execute('''SELECT "
    side_part_2 = "for row in self.cur:"
    side_part_3 = ""
    active = ''
    active_generate = ''
    active_generate_prepare = ''
    if (page_index>=0):
        active_generate_prepare = '''
            if i==page_index:
                active = ' class="active"'
            else:
                active = "" '''

    for i in range(len(config_main["elements"])):
        config_name = config_main["elements"][i]["name"]
        config_label = config_main["elements"][i]["label"]
        if config_name==active_item:
            active = 'class="active" '
            active_generate = active_generate_prepare
        else:
            active = ''
            active_generate = ''
        side_part_1 = side_part_1 + config_name
        if (i<(len(config_main["elements"])-1)):
            side_part_1 = side_part_1 + ","
        else:
            side_part_1 = side_part_1 + ''' FROM data_status WHERE patient_id='{{0}}' {0}.format(self.patient_id))
        '''.format("'''")
        side_part_2 = side_part_2 + '''
            {0}_page_status = row[{1}]'''.format(config_name,str(i))
        side_part_3 = side_part_3 + '''
        side_menu = side_menu + {0}
            <li class="sub-menu">
                <a {2}href="javascript:;">
                    <i class="fa fa-tasks"></i>
                    <span>{1}</span>
                </a>
                <ul class="sub">{0}
        active = ''
        for i in range(len({3}_page_status)):{4}
            side_menu = side_menu + {0}
                <li{{0}}><a  href="/{3}?patient_id={{1}}&page_index={{2}}">{1}_{{3}}</a></li>
            {0}.format(active,self.patient_id,str(i),str(i+1))
        side_menu = side_menu + {0}
                <li><a  href="/{3}?patient_id={{0}}&page_index={{1}}">新增</a></li>
            {0}.format(self.patient_id,str(len({3}_page_status)))
        side_menu = side_menu + {0}
                </ul>
            </li>
            {0}
        '''.format("'''",config_label,active,config_name,active_generate)

    side_code = side_code + side_part_1 + side_part_2 + '''
        self.cur.close()
        ''' + side_part_3
    if needPic=="1":
        side_code = side_code + '''
        side_menu = side_menu + {0}
            <li class="sub-menu">
                    <a href="/upload?patient_id={{0}}">
                    <i class="fa fa-tasks"></i>
                    <span>上传图片</span>
                </a>
            </li>

            <li class="sub-menu">
                    <a href="/show?patient_id={{0}}">
                    <i class="fa fa-tasks"></i>
                    <span>查阅图片</span>
                </a>
            </li>
        {0}.format(self.patient_id)
        '''.format("'''")
    return(side_code)

#--------------------------------------------------------------------------------------------------------------------------
# generator the HTML code
def generateHTML(editable):

    # generator the Javascript code
    def generateJS(editable):
        
        if (editable==0):
            #-------------------------------------------------------------
            # read version
            #typeName = "read"
            code = ""
            other_part = ""
            code =  code + '''var vm = new Vue({
            el: '#vm',
            data: {'''
            for ii in range(len(config["blocks"])):
                block = config["blocks"][ii]
                for i in range(len(block["elements"])):
                    element = block["elements"][i]
                    dateTrans_1 = ""
                    dateTrans_2 = ""
                    if (element["class"]=="time"):
                        dateTrans_1 = 'new Date(parseInt('
                        dateTrans_2 = ")*1000)"
                    if (element["class"]!="table"):
                        newCode = '''
                    {0}: {1}"{{{{{0}}}}}"{2},'''.format(element["name"],dateTrans_1,dateTrans_2)
                    else:
                        newCode = ""
                        for j in range(len(element["content"])):
                            dateTrans_1 = ""
                            dateTrans_2 = ""
                            if (element["content"][j]["class"]=="time"):
                                dateTrans_1 = 'new Date(parseInt('
                                dateTrans_2 = ")*1000)"

                            for k in range(int(element["row"])):
                                newCode = newCode + '''
                    {0}: {1}"{{{{{0}}}}}"{2},'''.format(element["content"][j]["name"]+"_"+str(k),dateTrans_1,dateTrans_2)
                            
                    code = code + newCode

                    if (element["class"]=="radio" and int(element["other"])==1):
                        newCode = '''
                    {0}: "{{{{{0}}}}}",'''.format(element["name"]+"_other")
                        code = code + newCode
                        other_part = other_part + '''
                    if (this.{0}!="other") this.{1} = "";'''.format(element["name"],element["name"]+"_other")

            code = code[:len(code)-1] + '''
            },
            mounted(){
                this.init()
            },
            methods:{
                init:function(){'''

            code = code + other_part
            code = code + '''
                }},
                submit:function(){{
                    return 0;
                }},
                edit:function(){{
                    window.location.href="/{0}?patient_id={{{{patient_id}}}}&edit=1";
                }},
                remove:function(){{
                    this.$http.get('/api/removePage?patient_id={{{{patient_id}}}}&page_index={{{{page_index}}}}&page_name={0}').then(function(res){{
                        window.location.href="{{% raw page_previous %}}";
                    }},function(res){{
                        console.log(res.status);
                    }});
                }}
            }}
        }});'''.format(configName)
            #------------------------------------------------------------
        else:
            #-------------------------------------------------------------
            # edit version
            #typeName = "edit"
            code = ""
            other_part = ""
            code = code + '''var vm = new Vue({
            el: '#vm',
            data: {'''
            for ii in range(len(config["blocks"])):
                block = config["blocks"][ii]
                for i in range(len(block["elements"])):
                    element = block["elements"][i]
                    dateTrans_1 = ""
                    dateTrans_2 = ""
                    if (element["class"]=="time"):
                        dateTrans_1 = "new Date(parseInt("
                        dateTrans_2 = ")*1000)"
                    if (element["class"]!="table"):
                        newCode = '''
                    {0}: {1}"{{{{{0}}}}}"{2},'''.format(element["name"],dateTrans_1,dateTrans_2)
                    else:
                        newCode = ""
                        for j in range(len(element["content"])):
                            dateTrans_1 = ""
                            dateTrans_2 = ""
                            if (element["content"][j]["class"]=="time"):
                                dateTrans_1 = 'new Date(parseInt('
                                dateTrans_2 = ")*1000)"

                            for k in range(int(element["row"])):
                                newCode = newCode + '''
                    {0}: {1}"{{{{{0}}}}}"{2},'''.format(element["content"][j]["name"]+"_"+str(k),dateTrans_1,dateTrans_2)
                    
                    code = code + newCode

                    if (element["class"]=="radio" and int(element["other"])==1):
                        newCode = '''
                    {0}: "{{{{{0}}}}}",'''.format(element["name"]+"_other")
                        code = code + newCode
                        other_part = other_part + '''
                        if (this.{0}!="other") this.{1} = "";'''.format(element["name"],element["name"]+"_other")
                    
            code = code[:len(code)-1] + '''
            }},
            mounted(){{
                this.init()
            }},
            methods:{{
                init:function(){{
                    this.$http.get('/api/{0}?patient_id={{{{patient_id}}}}&page_index={{{{page_index}}}}').then(function(res){{'''.format(configName)
            
            dateTrans_4 = ""
            for ii in range(len(config["blocks"])):
                block = config["blocks"][ii]
                for i in range(len(block["elements"])):
                    element = block["elements"][i]
                    dateTrans_1 = ""
                    dateTrans_2 = ""
                    dateTrans_4 = ""
                    if (element["class"]=="time"):
                        dateTrans_1 = "new Date(parseInt("
                        dateTrans_2 = ")*1000)"
                        dateTrans_4 = '''
                        if (isNaN(this.{0}.getTime())) this.{0}="";'''.format(element["name"])
                    if (element["class"]!="table"):
                        newCode = '''
                        this.{0}={1}res.data.{0}{2};{3}'''.format(element["name"],dateTrans_1,dateTrans_2,dateTrans_4)
                    else:
                        newCode = ""
                        for j in range(len(element["content"])):
                            for k in range(int(element["row"])):
                                dateTrans_1 = ""
                                dateTrans_2 = ""
                                dateTrans_4 = ""
                                if (element["content"][j]["class"]=="time"):
                                    dateTrans_1 = "new Date(parseInt("
                                    dateTrans_2 = ")*1000)"
                                    dateTrans_4 = '''
                        if (isNaN(this.{0}.getTime())) this.{0}="";'''.format(element["content"][j]["name"]+"_"+str(k))

                            
                                newCode = newCode + '''
                        this.{0}={1}res.data.{0}{2};{3}'''.format(element["content"][j]["name"]+"_"+str(k),dateTrans_1,dateTrans_2,dateTrans_4)

                    code = code + newCode

                    if (element["class"]=="radio" and int(element["other"])==1):
                        newCode = '''
                        this.{0}=res.data.{0};'''.format(element["name"]+"_other")
                        code = code + newCode

            code = code + other_part
            code = code + '''
                    },function(){
                        console.log('error');
                    });
                },
                submit: function(event) {
                    event.preventDefault();'''
                    

            part_1 = ""
            part_2 = ""
            for ii in range(len(config["blocks"])):
                block = config["blocks"][ii]
                for i in range(len(block["elements"])):
                    element = block["elements"][i]
                    dateTrans_3 = ""
                    if (element["class"]=="time"):
                        dateTrans_3 = '''
                    if (this.{0}!="") this.{0}=this.{0}.getTime()/1000;'''.format(element["name"])
                    if (element["class"]!="table"):
                        newCode = '''
                        {0}: this.{0},'''.format(element["name"])
                    else:
                        newCode = ""
                        for j in range(len(element["content"])):
                            for k in range(int(element["row"])):
                                if (element["content"][j]["class"]=="time"):
                                    dateTrans_3 = dateTrans_3 + '''
                    if (this.{0}!="") this.{0}=this.{0}.getTime()/1000;'''.format(element["content"][j]["name"]+"_"+str(k))

                                newCode = newCode + '''
                        {0}: this.{0},'''.format(element["content"][j]["name"]+"_"+str(k))

                    part_1 = part_1 + newCode
                    part_2 = part_2 + dateTrans_3
                    
                    if (element["class"]=="radio" and int(element["other"])==1):
                        newCode = '''
                        {0}: this.{0},'''.format(element["name"]+"_other")
                        part_1 = part_1 + newCode

            code = code + part_2 + '''
                    var
                    $form = $('#vm'),
                    data = {'''
            code = code + part_1[0:len(part_1)-1] + '''
                    }};
                    this.$http.post('/{0}?page_index={{{{page_index}}}}',data,{{emulateJSON:true}}).then(function(res){{
                        window.location.href="/{0}?patient_id={{{{patient_id}}}}&page_index={{{{page_index}}}}";
                    }},function(res){{
                        console.log(res.status);
                    }});
                }},
                remove:function(){{
                    this.$http.get('/api/removePage?patient_id={{{{patient_id}}}}&page_index={{{{page_index}}}}&page_name={0}').then(function(res){{
                        window.location.href="{{% raw page_previous %}}";
                    }},function(res){{
                        console.log(res.status);
                    }});
                }}
            }}
        }});'''.format(configName)
            #------------------------------------------------------------

        #fileName = "./js/"+typeName + "_" +configName + "_code.js"
        #with open(fileName,"w") as coder:
        #    coder.write(code)
        return code

    # --------------------------------------
    # the main code for generating HTML code
    disabled = ""
    #buttonName = "提交"
    #buttonAction = ''
    typeName = "edit"
    if (editable==0):
        disabled = "disabled"
        #buttonName = "编辑"
        #buttonAction = ''' v-on:click="/{0}?patient_id={{{{patient_id}}}}&edit=1" '''.format(configName)
        typeName = "read"

    code = '''<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="">

    <title>数据库系统</title>

        <link href="/templates/assets/css/bootstrap.css" rel="stylesheet">
        <link href="/templates/assets/font-awesome/css/font-awesome.css" rel="stylesheet" />
        <link href="/templates/assets/js/fancybox/jquery.fancybox.css" rel="stylesheet" />
        <link href="/templates/assets/css/style.css" rel="stylesheet">
        <link href="/templates/assets/css/style-responsive.css" rel="stylesheet">

        <script src="/templates/assets/js/jquery.js"></script>
        <script src="/js/vue.js"></script>
        <script src="/js/vue-resource.js"></script>

    <link rel="stylesheet" href="css/style_2036.css">
    <link rel="stylesheet" href="https://unpkg.com/element-ui/lib/theme-chalk/index.css">
    <script src="https://unpkg.com/element-ui/lib/index.js"></script>
  </head>

  <body>
  <section id="container" >
      <header class="header black-bg">
              <div class="sidebar-toggle-box">
                  <div class="fa fa-bars tooltips" data-placement="right" data-original-title="Toggle Navigation"></div>
              </div>
            <a href="#" class="logo"><b>数据库系统</b></a>
            <div class="top-menu">
            </div>
        </header>
      <aside>
          <div id="sidebar"  class="nav-collapse ">
              <ul class="sidebar-menu" id="nav-accordion">'''

    code = code + '''
                {% raw side_menu %}
            '''
    
    code = code + '''
              </ul>
          </div>
      </aside>

      <section id="main-content">
          <section class="wrapper site-min-height">
                <h3><i class="fa fa-angle-right"></i>{0}</h3>
                <hr>
            
                <form id="vm" v-on:submit="submit">
                    <input type="text" value="{{{{patient_id}}}}" v-model="patient_id" v-show="false"></input>
                    <div class="form-part">'''.format(config["label"])


    num_blocks = len(config["blocks"])
    for ii in range(num_blocks):
        block = config["blocks"][ii]
        len_elements = len(block["elements"])
        code = code + '''
                    <div class="block">
                        <h3>{0}</h3>'''.format(block["label"])

        for i in range(0,len_elements):
            element = block["elements"][i]
            newCode = ""
            if (element["class"]=="label"):
                pass
            elif (element["class"]=="text"):
                newCode = '''
                        <div>
                            <label class="form-label">{0}: </label>
                            <input class="form-text" v-model="{1}" {2}>
                            <br/><br/>
                        </div>'''.format(element["label"], element["name"], disabled)
            
            elif (element["class"]=="number"):
                newCode = '''
                        <div>
                            <label class="form-label">{0}: </label>
                            <input class="form-number" type="number" v-model.number="{1}" {3}>
                            <label>&nbsp;{2}</label>
                            <br/><br/>
                        </div>'''.format(element["label"], element["name"], element["unit"], disabled)

            elif (element["class"]=="radio"):
                newCode = '''
                        <div>
                            <label class="form-label">{0}:</label>'''.format(element["label"])
                for j in range(len(element["options"])):
                    newOption = '''
                            <input type="radio" id="{0}" value="{0}" v-model="{2}" {3}>
                            <label for="{0}">{1}&nbsp;&nbsp;</label>'''.format(
                                element["options"][j]["value"], element["options"][j]["label"], element["name"], disabled)
                    newCode = newCode + newOption
                if (int(element["other"])==1):
                    newOption = '''
                            <input type="radio" value="other" v-model="{0}" {2}>
                            <label for="other">其他：&nbsp;</label>
                            <input type="text" class="form-text" v-model="{1}"  {2}>'''.format(
                                element["name"], element["name"]+"_other", disabled)
                    newCode = newCode + newOption
                newCode = newCode + '''<br/><br/>
                        </div>'''
                
            elif (element["class"]=="time"):
                newCode = '''
                        <div>
                            <label class="form-label">{0}: </label>
                            <el-date-picker v-model="{1}" type="date" placeholder="Pick a day" {2}></el-date-picker>
                            <br/><br/>
                        </div>'''.format(element["label"], element["name"], disabled)
                
            elif (element["class"]=="table"):
                newCode = '''
                        <table width="100%" border="0" cellspacing="1" cellpadding="4" class="tabtop13" align="center">'''
                newRow = '''
                            <tr>'''
                for j in range(len(element["content"])):
                    newRow = newRow + '''
                                <td width="30%" style="background:#e9faff !important; text-align:center;
                                font-family: 微软雅黑;font-size: 16px;font-weight: bold;color: #255e95;
                                background-color:#e9faff;">{0}</td>'''.format(element["content"][j]['label'])
                newRow = newRow + '''
                            </tr>'''
                newCode = newCode + newRow

                for k in range(int(element["row"])):
                    newRow = '''
                            <tr>'''
                    for j in range(len(element["content"])):
                        if (element["content"][j]["class"]=="text"):
                            newRow = newRow + '''
                                <td style="text-align: center"><input style="width:90%; height:90%" v-model="{0}" {1}></td>'''.format(element["content"][j]["name"]+"_"+str(k),disabled)
                        elif (element["content"][j]["class"]=="number"):
                            newRow = newRow + '''
                                <td style="text-align: center"><input style="width:36px; height:20px" type="number" v-model.number=="{0}" {1}></td>'''.format(element["content"][j]["name"]+"_"+str(k),disabled)
                        elif (element["content"][j]["class"]=="radio"):
                            newRow = newRow + '''
                                <td style="text-align: center">'''
                            for jj in range(len(element["content"][j]["options"])):
                                newOption = '''
                                    <input type="radio" id="{0}" value="{0}" v-model="{2}" {3}>
                                    <label style="font-size:12px" for="{0}">{1}&nbsp;&nbsp;</label>'''.format(element["content"][j]["options"][jj]["value"],
                                    element["content"][j]["options"][jj]["label"], element["content"][j]["name"]+"_"+str(k),disabled)
                                newRow = newRow + newOption
                            newRow = newRow + '''
                                </td>'''
                        elif (element["content"][j]["class"]=="time"):
                            newRow = newRow + '''
                                <td style="text-align: center"><el-date-picker v-model="{0}" type="date" placeholder="Pick a day" {1}></el-date-picker></td>'''.format(
                                    element["content"][j]["name"]+"_"+str(k),disabled)
                    newRow = newRow + '''
                            </tr>'''
                    newCode = newCode + newRow
                newCode = newCode + '''
                        </table>'''
                if (element["explain"]!=""):
                    explain = element["explain"]
                    explain = explain.replace("\r\n","<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;")
                    explain = explain.replace("\n","<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;")
                    newCode = newCode + '''
                        <label style="font-size:12px">注：{0}</label><br/><br/>'''.format(explain)
            
            elif (element["class"]=="select"):
                pass
            code = code + newCode
        code = code + '''
                    </div>'''

    if (editable==1):
        newCode = '''</div>
                <div class="form-part-3">
                    <input type="submit" value="提交">
                    <button class="remove" type="button" v-on:click="remove">删除</button>
                </div>    
            </form>
        '''
    else:
        newCode = '''</div>
                <div class="form-part-3">
                    <button class="submit" type="button" v-on:click="edit">编辑</button>
                    <button class="remove" type="button" v-on:click="remove">删除</button>
                </div>    
            </form>
        '''
    newCode = newCode + '''
            </section>
      </section>

      <footer class="site-footer">
          <div class="text-center">
              2020 - Fan
              <a href="gallery.html#" class="go-top">
                  <i class="fa fa-angle-up"></i>
              </a>
          </div>
      </footer>
  </section>

    <!-- js placed at the end of the document so the pages load faster -->
        <script src="/templates/assets/js/fancybox/jquery.fancybox.js"></script>
        <script src="/templates/assets/js/bootstrap.min.js"></script>
        <script class="include" type="text/javascript" src="/templates/assets/js/jquery.dcjqaccordion.2.7.js"></script>
        <script src="/templates/assets/js/jquery.scrollTo.min.js"></script>
        <script src="/templates/assets/js/jquery.nicescroll.js" type="text/javascript"></script>

    <!--common script for all pages-->
        <script src="/templates/assets/js/common-scripts.js"></script>

    <!--script for this page-->
    <script type="text/javascript">
        $(function() {
            jQuery(".fancybox").fancybox();
        });
    </script>
    <script>
    '''
    code = code + newCode

    code = code + generateJS(editable)

    code = code + '''
    </script>
</body>
</html>'''

    fileName = "html/" + typeName + "_" +configName + "_page.html"
    with open(fileName,"w",encoding="utf-8") as coder:
        coder.write(code)

#--------------------------------------------------------------------------------------------------------------------------
# generator the Python Handler:
def generatePython_Handler():

    # ==========================
    # generator the page Handler
    code = '''# -*- coding:utf-8 -*-
# Created by Machine (Fan Jin build the code-generator)

import tornado, os, MySQLdb
import tornado.gen
import tornado.web
import json

class ''' 
    code = code + configName +"Handler(tornado.web.RequestHandler):"

    # -----------------------
    # generate the GET method
    code = code + '''

    def get(self):
        print('----------------------------Get {0}--------------------------')

        try:
            edit = self.get_argument("edit", "0")
        except:
            edit = "0"
        try:
            page_index = self.get_argument("page_index", "0")
        except:
            page_index = "0"
        page_index = int(page_index)
        
        self.patient_id = self.get_argument("patient_id", "")
        exist = 0
        submitted = "0"
        page_status = "0"
        
        # Get the patient's data status from the database
        conn = MySQLdb.connect( host   = 'localhost',
                                user   = '{1}',
                                passwd = '{2}',
                                db     = '{3}',
                                charset= 'utf8')
        conn.autocommit(1)

        self.cur = conn.cursor()
        self.cur.execute('''.format(configName,username,password,database)
    code = code + "'''" + "SELECT " + configName + " FROM data_status WHERE patient_id='{0}' " + "'''"
    code = code + '''.format(self.patient_id))
        for row in self.cur:
            page_status = row[0]

        if len(page_status)>page_index:
            exist = 1
            submitted = page_status[page_index]'''
    
    # generate the dynamic part for GET methon
    part_1 = "patient_id,"
    part_2 = ' patient_id=self.patient_id, '
    part_3 = ""
    kk = 1
    for ii in range(len(config["blocks"])):
        block = config["blocks"][ii]
        for i in range(len(block["elements"])):
            element = block["elements"][i]
            if (element["class"]!="label" and element["class"]!="table"):
                part_1 = part_1 + element["name"]+ ","
                part_2 = part_2 + ''' {0}=res[{1}],'''.format(element["name"],kk)
                part_3 = part_3 + ', ""'
                kk = kk + 1
                if (element["class"]=="radio" and int(element["other"])==1):
                    part_1 = part_1 + element["name"]+ "_other,"
                    part_2 = part_2 + ''' {0}=res[{1}],'''.format(element["name"]+"_other",kk)
                    part_3 = part_3 + ', ""'
                    kk = kk + 1

            elif (element["class"]=="table"):
                for j in range(len(element["content"])):
                    for k in range(int(element["row"])):
                        part_1 = part_1 + element["content"][j]["name"]+"_"+str(k)+ ","
                        part_2 = part_2 + ''' {0}=res[{1}],'''.format(element["content"][j]["name"]+"_"+str(k),kk)
                        part_3 = part_3 + ', ""'
                        kk = kk + 1
            
    part_1 = part_1[0:len(part_1)-1]
    part_2 = part_2[0:len(part_2)-1]
    #part_3 = part_3[0:len(part_3)-1]
    
    code = code + '''

        res = ['''
    code = code + "self.patient_id" + part_3 +"]"

    code =code + '''

        if (submitted=="1"):
            # Get the data from the database
            self.cur.execute('''
    code = code + "'''SELECT "

    code = code + part_1 + " FROM " + configName + "_{0} WHERE patient_id='{1}' '''.format(page_index,self.patient_id))"
    code = code + '''
            for row in self.cur:
                res = row

        if (exist==0):
            page_status = page_status + "0"
            sql = "UPDATE data_status SET {0}='" + page_status + "' WHERE patient_id='" + self.patient_id + "'"
            self.cur.execute(sql)
        '''.format(configName)

    side_code = getSideMenu(configName,1)
    code = code + side_code
    
    code = code + '''

        if page_index>0:
            page_previous = "/{0}?patient_id="+self.patient_id+"&page_index="+str(page_index-1)
        else:
            page_previous = "/base?patient_id="+self.patient_id
        if (submitted=="1" and edit=="0"):
            self.render("../html/read_'''.format(configName)
    code = code + configName + '''_page.html", side_menu=side_menu, page_index=page_index, page_previous=page_previous,''' + part_2 + ''')
        else:
            self.render("../html/edit_'''
    code = code + configName + '''_page.html", side_menu=side_menu, page_index=page_index, page_previous=page_previous,''' + part_2 + ''')'''

    # ------------------------
    # generate the POST method
    code = code + '''

    def post(self):
        print('----------------------------Submit----------------------------')

        self.patient_id = self.get_body_argument("patient_id")
        try:
            page_index = self.get_argument("page_index", "0")
        except:
            page_index = "0"
        page_index = int(page_index)
        '''
    # generate the dynamic part for POST method
    part_0 = ""
    part_1_1 = "patient_id, "
    part_1_2 = "'{1}', "
    part_2 = "self.patient_id, "
    part_3 = ' patient_id=self.patient_id, '
    kk = 2
    for ii in range(len(config["blocks"])):
        block = config["blocks"][ii]
        for i in range(len(block["elements"])):
            element = block["elements"][i]
            if (element["class"]=="label"):
                continue
            if (element["class"]!="table"):
                part_0 = part_0 + element["name"] + ' = self.get_body_argument("'+ element["name"] + '") ' + '''
        '''
                part_1_1 = part_1_1 + element["name"] + ", "
                part_1_2 = part_1_2 + "'{" + str(kk) + "}', "
                part_2 = part_2 + element["name"] + ","
                part_3 = part_3 +  element["name"] + '=' + element["name"] + ", "
                kk = kk + 1
                if (element["class"]=="radio" and int(element["other"])==1):
                    part_0 = part_0 + element["name"] + '_other = self.get_body_argument("'+ element["name"] + '_other") ' + '''
        '''
                    part_1_1 = part_1_1 + element["name"] + "_other, "
                    part_1_2 = part_1_2 + "'{" + str(kk) + "}', "
                    part_2 = part_2 + element["name"] + "_other,"
                    part_3 = part_3 +  element["name"] + '_other=' + element["name"] + "_other, "
                    kk = kk + 1

            else:
                for j in range(len(element["content"])):
                    for k in range(int(element["row"])):
                        part_0 = part_0 + element["content"][j]["name"] +"_"+str(k) + ' = self.get_body_argument("'+ element["content"][j]["name"] +"_"+str(k) + '") ' + '''
        '''
                        part_1_1 = part_1_1 + element["content"][j]["name"] +"_"+str(k) + ", "
                        part_1_2 = part_1_2 + "'{" + str(kk) + "}', "
                        part_2 = part_2 + element["content"][j]["name"] +"_"+str(k) + ","
                        part_3 = part_3 +  element["content"][j]["name"] +"_"+str(k) + '=' + element["content"][j]["name"] +"_"+str(k) + ", "
                        kk = kk + 1
    
    part_1_1 = part_1_1[0:len(part_1_1)-2]
    part_1_2 = part_1_2[0:len(part_1_2)-2]
    part_2 = part_2[0:len(part_2)-1]
    part_3 = part_3[0:len(part_3)-2]

    code = code + part_0 + '''
        conn = MySQLdb.connect( host   = 'localhost',
                                user   = '{0}',
                                passwd = '{1}',
                                db     = '{2}',
                                charset= 'utf8')
        conn.autocommit(1)

        # Insert the data into the database
        self.cur = conn.cursor()
        '''.format(username,password,database)
    code = code + "sql = '''REPLACE INTO " + configName + "_{0} "

    code = code + "(" + part_1_1 + ") VALUES (" + part_1_2 + ")" + " '''.format(page_index, " + part_2 + ")"
    code = code + '''
        self.cur.execute(sql)

        sql = "SELECT {0} FROM data_status WHERE patient_id='" + self.patient_id + "'"
        self.cur.execute(sql)
        page_status = "0"
        for row in self.cur:
            page_status = row[0]

        page_status_new = page_status[0:page_index] + "1" + page_status[(page_index+1):len(page_status)]
        sql = "UPDATE data_status SET {0}=" + page_status_new + " WHERE patient_id='" + self.patient_id + "'"

        self.cur.execute(sql)

        '''.format(configName)
    
    code = code + side_code

    code = code + '''

        self.write("finished")
'''

    fileName = "./handlers/" + configName + "Handler.py"
    with open(fileName,"w") as coder:
        coder.write(code)

    # ==========================
    # generator the api Handler
    code = '''# -*- coding:utf-8 -*-
# Created by Machine (Fan Jin build the code-generator)

import tornado, os, MySQLdb
import tornado.gen
import tornado.web
import json

class api_''' 
    code = code + configName +"Handler(tornado.web.RequestHandler):"
    code = code + '''

    def get(self):
        print('----------------------------Get api-{0}----------------------')
        self.patient_id = self.get_argument("patient_id", "")'''.format(configName)
    
    code = code + '''
        try:
            page_index = self.get_argument("page_index", "0")
        except:
            page_index = "0"

        conn = MySQLdb.connect( host   = 'localhost',
                                user   = '{0}',
                                passwd = '{1}',
                                db     = '{2}',
                                charset= 'utf8')
        conn.autocommit(1)
        # Get the data from the database
        self.cur = conn.cursor()
        self.cur.execute('''.format(username,password,database)
    code = code + "'''SELECT "
    # generate the dynamic part for api Handler
    part_1 = ""
    part_2 = ' "patient_id":self.patient_id,'
    part_3 = ""
    kk = 1
    for ii in range(len(config["blocks"])):
        block = config["blocks"][ii]
        for i in range(len(block["elements"])):
            element = block["elements"][i]
            if (element["class"]!="table"):
                part_1 = part_1 + element["name"] + ","
                if (element["class"]!="label"):
                    part_2 = part_2 + ''' "{0}":res[{1}],'''.format(element["name"],kk)
                    part_3 = part_3 + ', ""'
                    kk = kk + 1
                if (element["class"]=="radio" and int(element["other"])==1):
                    part_1 = part_1 + element["name"] + "_other,"
                    part_2 = part_2 + ''' "{0}":res[{1}],'''.format(element["name"]+"_other",kk)
                    part_3 = part_3 + ', ""'
                    kk = kk + 1
                    
            else:
                for j in range(len(element["content"])):
                    for k in range(int(element["row"])):
                        part_1 = part_1 + element["content"][j]["name"] + "_" + str(k) + ","
                        part_2 = part_2 + ''' "{0}":res[{1}],'''.format(element["content"][j]["name"] + "_" + str(k), kk)
                        part_3 = part_3 + ', ""'
                        kk = kk + 1
    
    part_1 = part_1[0:len(part_1)-1] + " FROM "
    part_2 = part_2[0:len(part_2)-1] + "}"

    code = code + part_1 + configName + "_{0} WHERE patient_id='{1}' '''.format(page_index,self.patient_id))"
    code = code + '''
        res = ['''
    code = code + "self.patient_id" + part_3 +"]"
    code = code + '''
        for row in self.cur:
            res = row
        self.data = {'''
    code = code + part_2
    code = code + '''
        self.write(json.dumps(self.data))
'''

    fileName = "./handlers/api_" + configName + "Handler.py"
    with open(fileName,"w") as coder:
        coder.write(code)
    
#--------------------------------------------------------------------------------------------------------------------------
# generator the SQL code: Handler
def generateSQL_Handler():
    code = '''use {0};

grant select, insert, update, delete on {0}.* to '{1}'@'localhost' identified by '{2}';

'''.format(database,username,password)
    for iii in range(maxPage):
        code = code + "drop table if exists " + configName + "_" + str(iii)+ ";\n\n"
        code = code + "create table " + configName + "_" + str(iii) + " ("
        code = code + '''
    '''
        for ii in range(len(config["blocks"])):
            block = config["blocks"][ii]
            for i in range(len(block["elements"])):
                element = block["elements"][i]
                if (element["class"]!="table"):
                    code = code + "`" + element["name"] + "`  varchar(20) default ''"
                    code = code + ''',
    '''
                    if (element["class"]=="radio" and int(element["other"])==1):
                        code = code + "`" + element["name"] + "_other`  varchar(50) default ''"
                        code = code + ''',
    '''

                else:
                    for j in range(len(element["content"])):
                        for k in range(int(element["row"])):
                            code = code + "`" + element["content"][j]["name"] + "_" +str(k)  + "`  varchar(20) default ''"
                            code = code + ''',
    '''
        code = code + '''primary key(patient_id)
) engine=innodb         default charset=utf8;

'''

    fileName = "./sql/" + configName + ".sql"
    with open(fileName,"w") as coder:
        coder.write(code)

#--------------------------------------------------------------------------------------------------------------------------
# generator the SQL code: TABLE data_status
def generateSQL_dataStatus():
    code = '''use {2};

grant select, insert, update, delete on {2}.* to '{0}'@'localhost' identified by '{1}';

'''.format(username,password,database)

    code = code + "drop table if exists data_status;\n\n"
    code = code + "create table data_status ("
    code = code + '''
    `patient_id`  varchar(12)  default '',
    '''
    for i in range(len(config_main["elements"])):
        element = config_main["elements"][i]
        code = code + "`" + element["name"] + '''`  varchar(20) default "0"'''
        if (i<len(config_main["elements"])-1):
            code = code + ''',
    '''
        else:
            code = code + '''
) engine=innodb         default charset=utf8;
'''

    fileName = "./sql/data_status.sql"
    with open(fileName,"w") as coder:
        coder.write(code)

#--------------------------------------------------------------------------------------------------------------------------
# generator the Python App.py:
def generatePython_App():

    code = '''# -*- coding:utf-8 -*-
# Created by Machine (Fan Jin build the code-generator)

import tornado, os
import tornado.web
from tornado import netutil, process, httpserver
from tornado.ioloop import IOLoop
from tornado.httpserver import HTTPServer

import MySQLdb

import json

'''

    part_1 = ""
    part_2 = ""
    part_3 = '''("/list",      listHandler),
                        ("/hello",      helloHandler),
                        ("/index",      indexHandler),
                        ("/api/new",      api_newHandler),
                        ("/api/remove",      api_removeHandler),
                        ("/api/removePage",      api_removePageHandler),
                        ("/downloadExcel",      downloadExcelHandler),
                        ("/api/list",      api_listHandler),
                        '''
    if (needPic == "1"):
        part_3 = part_3 + '''("/upload",      uploadHandler),
                        ("/show",      showHandler),
                        ("/api/pics",      api_picsHandler),
        '''
    part_4 = ""
    for i in range(len(config_main["elements"])):
        element = config_main["elements"][i]
        part_1 = part_1 + "from handlers." + element["name"] + "Handler import " + element["name"] + "Handler" + '''
'''
        part_2 = part_2 + "from handlers.api_" + element["name"] + "Handler import api_" + element["name"] + "Handler" + '''
'''
        part_3 = part_3 + '("/' + element["name"] + '",      ' + element["name"] + "Handler)" + ''',
                        '''
        part_4 = part_4 + '("/api/' + element["name"] + '",      api_' + element["name"] + "Handler)"
        if (i<len(config_main["elements"])-1):
            part_4 = part_4 + ''',
                        '''
    
    code = code + part_1 +part_2

    if (needPic=="1"):
        code = code + '''
class uploadHandler(tornado.web.RequestHandler):

    def get(self):
        print('----------------------------Prepare Upload--------------------------')
        self.patient_id = self.get_argument("patient_id", "")
        print(self.patient_id)
        # Get the patient's data status from the database
        conn = MySQLdb.connect( host   = 'localhost',
                                user   = '{0}',
                                passwd = '{1}',
                                db     = '{2}',
                                charset= 'utf8')
        conn.autocommit(1)
        self.cur = conn.cursor()
        {3}
        self.render("templates/upload.html", side_menu=side_menu, patient_id=self.patient_id)

    def post(self):
        print('----post------')
        self.patient_id = self.get_argument("patient_id", "")
        print(self.patient_id)

        self.render("templates/show.html", patient_id=self.patient_id)

        try:
            print("start---------upload")
            #imgfile = self.request.files.get('imgname')
            #print(type(imgfile))
            imgfile = self.request.files.get('pics')
            print(type(imgfile))
            try:
                print(os.listdir('./images/uploads/'+self.patient_id))
            except:
                os.mkdir('./images/uploads/'+self.patient_id)

            for img in imgfile:
                with open('./images/uploads/'+self.patient_id+'/'+img['filename'],'wb') as f:
                    f.write(img['body'])
                    #print(img['body'])
            print("---------upload -------done")

            # Get the patient's data status from the database
            conn = MySQLdb.connect( host   = 'localhost',
                                    user   = '{0}',
                                    passwd = '{1}',
                                    db     = '{2}',
                                    charset= 'utf8')
            conn.autocommit(1)

            self.cur = conn.cursor()
            self.cur.execute("SELECT base FROM data_status WHERE patient_id='" + self.patient_id + "'")
            self.cur.close()

        except Exception as e:
            print(repr(e))
            print('--Failed--')

class api_picsHandler(tornado.web.RequestHandler):

    def get(self):
        print('----------------------------API_Pic--------------------------')
        self.patient_id = self.get_argument("patient_id", "")

        pics = []
        try:
            pics = os.listdir('./images/uploads/'+self.patient_id)
        except:
            pass
        self.write(json.dumps(pics))

class showHandler(tornado.web.RequestHandler):

    def get(self):
        print('----------------------------Show Pic--------------------------')
        self.patient_id = self.get_argument("patient_id", "")
        # Get the patient's data status from the database
        conn = MySQLdb.connect( host   = 'localhost',
                                user   = '{0}',
                                passwd = '{1}',
                                db     = '{2}',
                                charset= 'utf8')
        conn.autocommit(1)
        self.cur = conn.cursor()
        {4}
        self.render("templates/show.html", side_menu=side_menu, patient_id=self.patient_id)
'''.format(username,password,database,getSideMenu("upload",-1),getSideMenu("show",-1))

    code = code + '''
class listHandler(tornado.web.RequestHandler):

    def get(self):
        print('----------------------------Get list--------------------------')
        self.render("list.html")

class helloHandler(tornado.web.RequestHandler):

    def get(self):
        print('----------------------------Get hello--------------------------')
        self.render("Hello.html")

class api_newHandler(tornado.web.RequestHandler):

    def get(self):
        print('----------------------------Get new--------------------------')
        self.patient_id = self.get_argument("patient_id", "")
        conn = MySQLdb.connect( host   = 'localhost',
                                user   = '{0}',
                                passwd = '{1}',
                                db     = '{2}',
                                charset= 'utf8')
        conn.autocommit(1)
        # Get the data from the database
        self.cur = conn.cursor()
        sqls = "SELECT patient_id FROM base_0 WHERE patient_id='" + self.patient_id + "'"
        self.cur.execute(sqls)
        result = 0
        for row in self.cur:
            result = 1
        if (result == 0):
            sql = "INSERT INTO data_status (patient_id,base) VALUES ('" + self.patient_id + "','0')"
            self.cur.execute(sql)
        self.cur.close()
        self.data = {{ "patient_id": self.patient_id, "result": result }}
        self.write(json.dumps(self.data))

class api_removeHandler(tornado.web.RequestHandler):

    def get(self):
        print('----------------------------Remove--------------------------')
        self.patient_id = self.get_argument("patient_id", "")
        conn = MySQLdb.connect( host   = 'localhost',
                                user   = '{0}',
                                passwd = '{1}',
                                db     = '{2}',
                                charset= 'utf8')
        conn.autocommit(1)
        # Get the data from the database
        self.cur = conn.cursor()
        sqls = ["DELETE FROM data_status WHERE patient_id='" + self.patient_id + "'",'''.format(username,password,database)

    for i in range(len(config_main["elements"])):
        element = config_main["elements"][i]
        for j in range(10):
            code = code + '''
                "DELETE FROM ''' + element["name"] + '_' + str(j) + ''' WHERE patient_id='" + self.patient_id + "'" '''
        if (i<len(config_main["elements"])-1):
            code = code + ''','''
    code = code + ''']
'''
    code = code + '''
        for sql in sqls:
            self.cur.execute(sql)
        self.cur.close()

class api_removePageHandler(tornado.web.RequestHandler):

    def get(self):
        print('----------------------------remove page--------------------------')
        self.patient_id = self.get_argument("patient_id", "")
        self.page_name = self.get_argument("page_name", "")
        self.page_index = self.get_argument("page_index", "")
        page_index =int(self.page_index)
        conn = MySQLdb.connect( host   = 'localhost',
                                user   = '{0}',
                                passwd = '{1}',
                                db     = '{2}',
                                charset= 'utf8')
        conn.autocommit(1)
        # Get the data from the database
        self.cur = conn.cursor()
        sql = "SELECT " + self.page_name + " FROM data_status WHERE patient_id='" + self.patient_id + "'"
        self.cur.execute(sql)
        page_status = "0"
        for row in self.cur:
            page_status = row[0]
        if page_index>0:
            page_status_new = page_status[0:page_index] + page_status[(page_index+1):len(page_status)]
        else:
            page_status_new = "0"
        sql = "UPDATE data_status SET " + self.page_name + "=" + page_status_new + " WHERE patient_id='" + self.patient_id + "'"
        self.cur.execute(sql)

        sql = "DELETE FROM " + self.page_name + "_" + str(page_index)+ " WHERE patient_id='" + self.patient_id + "'"
        self.cur.execute(sql)

        for i in range(page_index,len(page_status)-1):
            sql = "INSERT INTO " + self.page_name + "_" + str(i)+ " SELECT * FROM " + self.page_name + "_" + str(i+1) + " WHERE patient_id='" + self.patient_id + "'"
            self.cur.execute(sql)
            sql = "DELETE FROM " + self.page_name + "_" + str(i+1)+ " WHERE patient_id='" + self.patient_id + "'"
            self.cur.execute(sql)
        self.cur.close()
        self.write("finished")

class downloadExcelHandler(tornado.web.RequestHandler):

    def get(self):
        print('----------------------------download Excel--------------------------')
        os.system("python3 download_xls.py")
        self.set_header ('Content-Disposition', 'attachment; filename='+"data.xls")
        with open("download/data.xls", 'rb') as f:
            while True:
                data = f.read(1024)
                if not data:
                    break
                self.write(data)
        self.finish()

class indexHandler(tornado.web.RequestHandler):

    def get(self):
        print('----------------------------index--------------------------')
        conn = MySQLdb.connect( host   = 'localhost',
                                user   = '{0}',
                                passwd = '{1}',
                                db     = '{2}',
                                charset= 'utf8')
        conn.autocommit(1)
        # Get the data from the database
        cur = conn.cursor()
        sql = "SELECT patient_id FROM data_status"
        cur.execute(sql)
        num_plan = 50
        num_tot = 0
        for row in cur:
            num_tot = num_tot + 1
        percent_0 = int(num_tot/num_plan*100)
        percent_1 = 100-percent_0
        if num_tot==0:
            num = [0,0,0,0,0,0]
        if num_tot==1:
            num = [0,0,0,0,0,1]
        if num_tot==2:
            num = [0,0,0,0,1,1]
        if num_tot==3:
            num = [0,0,0,1,0,2]
        if num_tot==4:
            num = [0,0,0,1,0,3]
        if num_tot>4:
            num = [int(num_tot*0.15),int(num_tot*0.15),int(num_tot*0.15),int(num_tot*0.15),int(num_tot*0.15)]
            num_6 = num_tot - (num[0]+num[1]+num[2]+num[3]+num[4])
            num.extend([num_6])
        
        self.render("templates/index.html", num_tot=num_tot, percent_0=percent_0, percent_1=percent_1, num_1=num[0], num_2=num[1], num_3=num[2], num_4=num[3], num_5=num[4], num_6=num[5])

class api_listHandler(tornado.web.RequestHandler):

    def get(self):
        print('----------------------------Get api-list--------------------------')
        conn = MySQLdb.connect( host   = 'localhost',
                                user   = '{0}',
                                passwd = '{1}',
                                db     = '{2}',
                                charset= 'utf8')
        conn.autocommit(1)
        # Get the data from the database
        self.cur = conn.cursor()
        sqls = "SELECT patient_id,name,sex,age FROM base_0"
        self.cur.execute(sqls)
        patient_list = []
        for row in self.cur:
            patient_list.append({{
                "patient_id": row[0],
                "name": row[1],
                "sex": row[2],
                "age": row[3]
            }})
        print(patient_list)
        self.write(json.dumps(patient_list))
'''.format(username,password,database)

    code = code + '''

class Application(tornado.web.Application):

    def __init__(self):

        handlers =  [
                        '''
    code = code + part_3 + part_4

    code = code + '''
                    ]

        tornado.web.Application.__init__(self, handlers)

if __name__ == "__main__":
    app = Application()
    print('----------------------------Start Server----------------------------')
    server = HTTPServer(app)
    server.listen({0})
    IOLoop.current().start()
'''.format(port_out)

    fileName = "app.py"
    with open(fileName,"w") as coder:
        coder.write(code)

#--------------------------------------------------------------------------------------------------------------------------
# generate Nginx configuration
def generateNginx_config():

    code = '''server {{
    listen      {0};

    root       {1}/www;
    access_log {1}/log/access_log;
    error_log  {1}/log/error_log;

    location ~ ^\/(js|css|images|templates)\/.*$ {{
        root {1}/www;
    }}

    location / {{
        proxy_pass       http://127.0.0.1:{2};
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }}
}}'''.format(port_in, app_dir, port_out)

    fileName = "nginx/" + app_Name
    with open(fileName,"w") as coder:
        coder.write(code)

#--------------------------------------------------------------------------------------------------------------------------
# generate Supervisor configuration
def generateSupervisor_config():

    code = '''[program:{0}]

command     = python3 -u {1}/www/app.py
directory   = {1}/www
user        = ubuntu
startsecs   = 3

redirect_stderr         = true
stdout_logfile_maxbytes = 500MB
stdout_logfile_backups  = 10
stdout_logfile          = {1}/log/app.log
    '''.format(app_Name, app_dir)

    fileName = "supervisor/" + app_Name + ".conf"
    with open(fileName,"w") as coder:
        coder.write(code)

#--------------------------------------------------------------------------------------------------------------------------
# generate  Shell code
def generateShell():

    code = "#!/bin/bash\n\n"
    code = code + "mysql -u root -p" + password + " < ../sql/create.sql\n"
    code = code + "mysql -u root -p" + password + " < ../sql/data_status.sql\n"
    for config_element in config_main["elements"]:
        code = code + '''
mysql -u root -p{0} < ../sql/{1}.sql
        '''.format(password,config_element["name"])
    fileName = "shell/sql.sh"
    with open(fileName,"w") as coder:
        coder.write(code)

    code = '''drop database if exists {0};

create database {0};
    '''.format(database)
    fileName = "sql/create.sql"
    with open(fileName,"w") as coder:
        coder.write(code)

    code = ""
    code = code + '''#!/bin/bash
    sudo -S cp ../nginx/{0} /etc/nginx/sites-enabled/ << EOF
{1}
EOF

sudo -S mkdir {2}/log << EOF
{1}
EOF

sudo -S /etc/init.d/nginx reload << EOF
{1}
EOF
    '''.format(app_Name, password_remote, app_dir)
    fileName = "shell/nginx.sh"
    with open(fileName,"w") as coder:
        coder.write(code)
    
    code = ""
    code = code + '''#!/bin/bash
sudo -S cp ../supervisor/{0}.conf /etc/supervisor/conf.d/ << EOF
{1}
EOF

sudo -S supervisorctl reload << EOF
{1}
EOF

sudo -S supervisorctl start {0} << EOF
{1}
EOF
    '''.format(app_Name, password_remote)
    if version!="0":
        code = '''#!/bin/bash

sudo -S mkdir {0}/log << EOF
{1}
EOF

sudo -S supervisorctl reload << EOF
{1}
EOF
        '''.format(app_dir, password_remote)
    fileName = "shell/supervisor.sh"
    with open(fileName,"w") as coder:
        coder.write(code)
           
    code = "#!/bin/bash\n\n"
    code = code + '''
sudo -S rm -f -R {0} << EOF
{1}
EOF

sudo -S mkdir {0} << EOF
{1}
EOF

sudo -S cp -R {2}/v2 {0}/www << EOF
{1}
EOF

sudo chmod 777 -R {0} << EOF
{1}
EOF
    '''.format(app_dir, password_remote, remote_base_dir)

    fileName = "shell/clear.sh"
    with open(fileName,"w") as coder:
        coder.write(code)

#--------------------------------------------------------------------------------------------------------------------------
# download data into Excel
def generateDownloadExcel():
    code = '''
#!/usr/bin/python
# -*- coding:utf-8 -*-

# Download data into Excel
# Date for Version 2: 2020.04.08

import MySQLdb
import xlrd,xlwt
import time
from datetime import datetime
import os

def getData():

    file_new = xlwt.Workbook(encoding = 'utf-8')
    sheet_1 = file_new.add_sheet('main')

    # prepare some settings
    dateFormat = xlwt.XFStyle()
    dateFormat.num_format_str = 'yyyy-mm-dd'

    warning_style = xlwt.XFStyle()
    fnt = xlwt.Font()
    fnt.colour_index = 2
    warning_style.font = fnt

    tt = 60*60*24
    s_date = int(datetime(1899, 12, 31).timestamp()/tt)-2

    conn = MySQLdb.connect( host   = 'localhost',
                            user   = 'root',
                            passwd = '1',
                            db     = 'Test',
                            charset= 'utf8')
    conn.autocommit(1)
    cur = conn.cursor()
'''

    part_1 = '''
    '''
    part_2 = '''
    sql = "SELECT patient_id'''
    part_3 = '''cur.execute(sql)
    patient_id = []
    '''
    part_4 = '''
    for row in cur:
        patient_id.extend([row[0]])
    '''
    part_5 = '''
    row_max = len(patient_id)
    col_max = '''

    part_6 = '''
    matrix = [list("" for i in range(col_max)) for i in range(row_max+2)]
    for ii in range(len(patient_id)):
        patient = patient_id[ii]
        kk = 0
        '''
    part_7 = '''
    col_names_all = ["patient_id"]
    col_labels_all = ["病例号"]'''
    transfer = '''
    '''
    transfer_2 = '''
    '''

    for iii in range(len(config_main["elements"])):
        config_element = config_main["elements"][iii]
        config_name = clear + "configuration/config_" + config_element["name"] + ".json"
        config_text = open(config_name,encoding="utf-8")
        jsonData = config_text.read()
        config = json.loads(jsonData)
        config_name = config["name"]

        col_names = []
        col_labels = []

        for ii in range(len(config["blocks"])):
            block = config["blocks"][ii]
            for i in range(len(block["elements"])):
                element = block["elements"][i]
                if (element["class"]!="table"):
                    col_names.extend([element["name"]])
                    col_labels.extend([element["label"]])
                    if (element["class"]=="radio" and int(element["other"])==1):
                        col_names.extend([element["name"] + "_other"])
                        col_labels.extend([element["label"] + "_other"])
                else:
                    for j in range(len(element["content"])):
                        for k in range(int(element["row"])):
                            col_names.extend([element["content"][j]["name"] + "_" +str(k)])
                            col_labels.extend([element["content"][j]["label"] + "_" +str(k)])

        col_names_trans = '["' + '","'.join(col_names[1:]) + '"]'
        col_labels_trans = '["' + '","'.join(col_labels[1:]) + '"]'
        transfer = transfer + '''{0}_col_names = {1}
    '''.format(config_name,col_names_trans)
        transfer_2 = transfer_2 + '''{0}_col_labels = {1}
    '''.format(config_name,col_labels_trans)
        col_names = ','.join(col_names[1:])

        part_1 = part_1 + '''{0}_col = len({0}_col_names)
    '''.format(config_name)
        part_2 = part_2 + "," + config_name
        part_3 = part_3 + '''{0}_page_max = 0
    '''.format(config_name)
        part_4 = part_4 + '''
        {0}_page_status = str(row[{1}])
        {0}_page_status = str(int({0}_page_status[::-1]))[::-1] # delete 0 in tail
        {0}_page_max = max({0}_page_max,len({0}_page_status))
        '''.format(config_name,str(iii+1))
        part_5 = part_5 + '''{0}_col*{0}_page_max + '''.format(config_name)
        part_6 = part_6 + '''
        for i in range({0}_page_max):
            page = "{0}_" + str(i)
            sql = "SELECT {1} FROM " + page + " WHERE patient_id='" + patient + "'"
            cur.execute(sql)
            record = []
            for row in cur:
                record = row
            if len(record)==0:
                record = ["" for j in range({0}_col)]
            for v in record:
                kk = kk + 1
                matrix[ii+2][kk] = v
            '''.format(config_name,col_names)
        
        part_7 = part_7 + '''
    for i in range({0}_page_max):
        name_suffix = "_form"+str(i+1)
        label_suffix = "_表"+str(i+1)
        if i==0:
            name_suffix = ""
            label_suffix = ""
        col_names = []
        col_labels = []
        for j in range(len({0}_col_names)):
            col_name = {0}_col_names[j]
            col_label = {0}_col_labels[j]
            col_names.extend([col_name+name_suffix])
            col_labels.extend([col_label+label_suffix])
        col_names_all.extend(col_names)
        col_labels_all.extend(col_labels)
    '''.format(config_name)

    part_2 = part_2 + ''' FROM data_status" 
    '''
    part_5 = part_5 + "1"

    code = code + transfer + transfer_2 + part_1 + part_2 + part_3 + part_4 + part_5 + part_6 + part_7

    code = code + '''
    for j in range(col_max):
        matrix[0][j] = col_labels_all[j]
        matrix[1][j] = col_names_all[j]
    for i in range(row_max):
        matrix[i+2][0] = patient_id[i]
    for i in range(row_max+2):
        for j in range(col_max):
            sheet_1.write(i, j, label=matrix[i][j])
            
    # save the file
    new_file = 'download/data.xls'
    if os.path.exists(new_file):
        os.remove(new_file)
    file_new.save(new_file)

getData()
'''

    fileName = "download_xls.py"
    with open(fileName,"w") as coder:
        coder.write(code)

#--------------------------------------------------------------------------------------------------------------------------
# prepare the directories
if os.path.exists("handlers"):
    shutil.rmtree("handlers")
if os.path.exists("html"):
    shutil.rmtree("html")
if os.path.exists("sql"):
    shutil.rmtree("sql")
if os.path.exists("nginx"):
    shutil.rmtree("nginx")
if os.path.exists("supervisor"):
    shutil.rmtree("supervisor")
if os.path.exists("shell"):
    shutil.rmtree("shell")

os.mkdir("handlers")
os.mkdir("html")
os.mkdir("sql")
os.mkdir("nginx")
os.mkdir("supervisor")
os.mkdir("shell")

# loading the config file
config_text = open(clear + "configuration.json", encoding="utf-8")
jsonData = config_text.read()
config_main = json.loads(jsonData)

server_info_text = open("../server_info.private",encoding="utf-8")
jsonData = server_info_text.read()
server_info = json.loads(jsonData)
password_remote = server_info["passwd"]

# test the loading file
#print("-------------------Check the main configuration File---------------------")
#print(config_main["elements"][0])
#print("-------------------------------------------------------------------------")

for config_element in config_main["elements"]:
    config_name = clear + "configuration/config_" + config_element["name"] + ".json"
    config_text = open(config_name,encoding="utf-8")
    jsonData = config_text.read()
    config = json.loads(jsonData)
    configName = config["name"]

    # test the loading file
    #print("--------------------------Test the Loading File--------------------------")
    #print(config["elements"][1])
    #print("-------------------------------------------------------------------------")

    generateHTML(0)
    generateHTML(1)
    generatePython_Handler()
    generateSQL_Handler()

generateSQL_dataStatus()
generatePython_App()
generateNginx_config()
generateSupervisor_config()
generateShell()
generateDownloadExcel()
